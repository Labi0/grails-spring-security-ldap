{note}
Configuring your LDAP server is beyond the scope of this document. There are many different approaches and this will most likely be done by IT staff. It's assumed here that you already have a running LDAP or Active Directory server.
{note}

There isn't much that you need to do in your application to use LDAP. Just install this plugin, and configure any required parameters and whatever optional parameters you want in Config.groovy. These are described in detail in [Chapter 3|guide:3. Configuration] but typically you only need to set these properties

{code}
grails.plugins.springsecurity.ldap.context.managerDn = 'uid=admin,ou=system'
grails.plugins.springsecurity.ldap.context.managerPassword = 'secret'
grails.plugins.springsecurity.ldap.context.server = 'ldap://localhost:10389'
grails.plugins.springsecurity.ldap.authorities.groupSearchBase =
     'ou=groups,dc=yourcompany,dc=com'
grails.plugins.springsecurity.ldap.search.base = 'dc=yourcompany,dc=com'
{code}

Often all role information will be stored in LDAP, but if you want to also assign application-specific roles to users in the database, then add this

{code}
grails.plugins.springsecurity.ldap.authorities.retrieveDatabaseRoles = true
{code}

to do an extra database lookup after the LDAP lookup.

Depending on how passwords are encrypted in LDAP you may also need to configure the encryption algorithm, e.g.

{code}
grails.plugins.springsecurity.password.algorithm = 'SHA-256'
{code}

h4.  Sample For Active Directory Config.groovy

Active directory (Win2k8 tested) is a little bit different although still painless if you know what you are doing. See sample config file below with comments:

{note}
Obviously remove the values inside and including the [] brackets
{note}

{code}
//ldap config
grails.plugins.springsecurity.ldap.context.managerDn = '[distinguishedName]'
grails.plugins.springsecurity.ldap.context.managerPassword = '[password]'
grails.plugins.springsecurity.ldap.context.server = 'ldap://[ip]:[port]/'
grails.plugins.springsecurity.ldap.authorities.ignorePartialResultException = true //I found I needed this for active directory for some reason...don't know exactly why yet
grails.plugins.springsecurity.ldap.search.base = '[the base directory to start the search.  usually something like dc=mycompany,dc=com]'
grails.plugins.springsecurity.ldap.search.filter="sAMAccountName={0}" //for active directory you need this
grails.plugins.springsecurity.ldap.search.searchSubtree = true 
grails.plugins.springsecurity.ldap.auth.hideUserNotFoundExceptions= false
grails.plugins.springsecurity.ldap.search.attributesToReturn = ['mail', 'displayName'] //extra attributes you want returned though then you need to create some custom classes..only if you want to add roles
grails.plugins.springsecurity.providerNames=['ldapAuthProvider', 'anonymousAuthenticationProvider'] //This is in case you want to skip loading from db as well and only use ldap

//role specific ldap config
grails.plugins.springsecurity.ldap.useRememberMe = false //I don't require this, but if you do you have to run another script
grails.plugins.springsecurity.ldap.authorities.retrieveGroupRoles = true
grails.plugins.springsecurity.ldap.authorities.groupSearchBase ='[the base directory to start the search.  usually something like dc=mycompany,dc=com]'
grails.plugins.springsecurity.ldap.authorities.groupSearchFilter = 'member={0}' //again this is active directory specific.  I'm sure the example ones will work fine for a plain ldap server
{code}

h4. Custom UserDetailsContextMapper

There are three options for mapping LDAP attributes to @UserDetails@ data (as specified by the @grails.plugins.springsecurity.ldap.mapper.userDetailsClass@ config attribute) and hopefully one of those will be sufficient for your needs. If not, it's easy to implement [UserDetailsContextMapper|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/ldap/userdetails/UserDetailsContextMapper.html] yourself.

Create a class in @src/groovy@ or @src/java@ that implements [UserDetailsContextMapper|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/ldap/userdetails/UserDetailsContextMapper.html] and register it in @grails-app/conf/spring/resources.groovy@:

{code}
import com.mycompany.myapp.MyUserDetailsContextMapper

beans = {
   ldapUserDetailsMapper(MyUserDetailsContextMapper) {
      // bean attributes
   }
}
{code}


h4.  Sample Custom UserDetailsContextMapper and UserDetails

You need to implement these yourself if you want more data out of ldap.  Keep in mind the values below have been tested on Active Directory for Win2k8.


{code}

import org.springframework.ldap.core.DirContextAdapter;
import org.springframework.ldap.core.DirContextOperations;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.ldap.ppolicy.PasswordPolicyControl;
import org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl;
import org.springframework.security.ldap.userdetails.UserDetailsContextMapper

class UMUserDetailsContextMapper implements UserDetailsContextMapper {

	public UserDetails mapUserFromContext(DirContextOperations ctx, String username, Collection authority) {
		UMUserDetails userDetails = new UMUserDetails()

		//keep in mind that if field has a null value you need to check or you'll get a null pointer exception

		userDetails.fullname =  ctx.originalAttrs.attrs['name'].values[0]
		userDetails.email = ctx.originalAttrs.attrs['mail'].values[0].toString().toLowerCase()
		userDetails.username = ctx.originalAttrs.attrs['samaccountname'].values[0].toString().toLowerCase()
		def title = ctx.originalAttrs.attrs['title']
		if(title != null)
			title = ctx.originalAttrs.attrs['title'].values[0]
		else
			title = ''
		userDetails.title = title
		userDetails.authorities = authority

		return userDetails
	}

	public void mapUserToContext(UserDetails user, DirContextAdapter ctx) {
		throw new Exception("Only retrieving data from AD is currently supported.  Please contact development")
	}

}



{code}

{code}
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

class UMUserDetails implements UserDetails{

	//overwridden instance variables.  must be here!
	Collection<GrantedAuthority> authorities
	String password
	String username
	boolean accountNonExpired
	boolean accountNonLocked
	boolean credentialsNonExpired
	boolean enabled	
	
	//new instance variable 
	String fullname
	String email
	String title


}
{code}





